generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  isAdmin           Boolean  @default(false) @map("is_admin")
  passwordHash      String   @map("password_hash")
  is2FAEnabled      Boolean  @default(false) @map("is_2fa_enabled")
  twoFactorSecret   Bytes?   @map("two_factor_secret")
  twoFactorSecretIV Bytes?   @map("two_factor_secret_iv")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  sessions      Session[]
  tokens        Token[]
  recoveryCodes RecoveryCode[]

  @@map("users")
}

model Session {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  lastOtpVerifiedAt DateTime @default(now()) @map("last_otp_verified_at")
  expires           DateTime
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  ip              String?
  device          String?
  browser         String?
  operatingSystem String?

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

enum TokenType {
  EMAIL_VERIFICATION
  CHANGE_EMAIL
  RESET_PASSWORD
}

model Token {
  id      String    @id @default(uuid())
  type    TokenType
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model RecoveryCode {
  id     Int     @id @default(autoincrement())
  userId String? @map("user_id")
  code   Bytes
  codeIV Bytes   @map("code_iv")

  user User? @relation(fields: [userId], references: [id])

  @@map("recovery_codes")
}

"use client";

import type { User } from "@/utils/types";
import { type PropsWithChildren, useMemo, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "react-toastify";
import { Button } from "@dkstore/ui/button";
import {
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@dkstore/ui/dialog";
import { InputOTP, InputOTPGroup, InputOTPSlot } from "@dkstore/ui/input-otp";
import { Label } from "@dkstore/ui/label";
import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2 } from "lucide-react";
import { useAction } from "next-safe-action/hooks";
import { verify2FAAction } from "@/actions/account";
import {
  type Verify2FASchema,
  verify2FASchema,
} from "@/actions/account/schema";
import { useUser } from "@/lib/auth";

export interface Confirm2FAProps extends PropsWithChildren {
  readonly user: User;
}

export function Confirm2FA({ children, user }: Confirm2FAProps) {
  const { lastOtpVerifiedAt, setLastOtpVerifiedAt } = useUser();
  const [isVerified, setIsVerified] = useState(false);

  const hasAlreadyVerified = useMemo(() => {
    if (!lastOtpVerifiedAt) return false;
    const diff = Date.now() - lastOtpVerifiedAt.getTime();
    return diff < 1000 * 60 * 5;
  }, [lastOtpVerifiedAt]);

  const verify2FA = useAction(verify2FAAction, {
    onError: (args) => {
      toast.error(args.error.serverError);
    },
    onSuccess: () => {
      setIsVerified(true);
      setLastOtpVerifiedAt(new Date());
    },
  });

  const form = useForm<Verify2FASchema>({
    resolver: zodResolver(verify2FASchema),
  });

  function onSubmit(values: Verify2FASchema) {
    if (!hasAlreadyVerified) {
      verify2FA.execute(values);
    }
  }

  return (
    <DialogContent>
      {!isVerified && user.is2FAEnabled && !hasAlreadyVerified ? (
        <>
          <DialogHeader className="space-y-6">
            <DialogTitle>2FA Verification</DialogTitle>
            <DialogDescription className="text-center text-base">
              To continue, please enter the verification code generated by your
              authenticator app
            </DialogDescription>
          </DialogHeader>
          <form className="mt-4" onSubmit={form.handleSubmit(onSubmit)}>
            <div className="flex flex-col items-center gap-2">
              <Label htmlFor="otpCode">OTP Code</Label>
              <InputOTP
                maxLength={6}
                name="otpCode"
                id="otpCode"
                pattern={"^\\d+$"}
                containerClassName="w-fit"
                onChange={(value) => {
                  form.setValue("otpCode", value);
                }}
              >
                <InputOTPGroup className="gap-1">
                  {Array.from({ length: 6 }).map((_, index) => (
                    <InputOTPSlot
                      // eslint-disable-next-line react/no-array-index-key
                      key={index}
                      index={index}
                      className="rounded-md border-2"
                    />
                  ))}
                </InputOTPGroup>
              </InputOTP>

              {form.formState.errors.otpCode ? (
                <p className="text-sm text-destructive">
                  {form.formState.errors.otpCode.message}
                </p>
              ) : null}
            </div>

            <div className="mt-6 flex items-center justify-center gap-2">
              <Button type="submit" disabled={verify2FA.status === "executing"}>
                {verify2FA.status === "executing" ? (
                  <Loader2 className="animate-spin" />
                ) : (
                  "Verify"
                )}
              </Button>
              <DialogClose asChild>
                <Button variant="secondary">Cancel</Button>
              </DialogClose>
            </div>
          </form>
        </>
      ) : (
        children
      )}
    </DialogContent>
  );
}
